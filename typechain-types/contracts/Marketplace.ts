/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Marketplace {
  export type ListingIdStruct = { nft: AddressLike; tokenId: BigNumberish };

  export type ListingIdStructOutput = [nft: string, tokenId: bigint] & {
    nft: string;
    tokenId: bigint;
  };

  export type ListingStruct = { seller: AddressLike; price: BigNumberish };

  export type ListingStructOutput = [seller: string, price: bigint] & {
    seller: string;
    price: bigint;
  };
}

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "buyNFT"
      | "cancelListing"
      | "getAllListings"
      | "getListing"
      | "listNFT"
      | "listings"
      | "listingsList"
      | "platformFeeBasisPoints"
      | "setPlatformFee"
      | "totalListings"
      | "totalVolumeTraded"
      | "updateListing"
      | "withdrawTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ListingCanceled"
      | "ListingUpdated"
      | "ListingsCountUpdated"
      | "NFTListed"
      | "NFTSold"
      | "PlatformFeeUpdated"
      | "VolumeUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumeTraded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumeTraded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export namespace ListingCanceledEvent {
  export type InputTuple = [
    seller: AddressLike,
    nft: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [seller: string, nft: string, tokenId: bigint];
  export interface OutputObject {
    seller: string;
    nft: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingUpdatedEvent {
  export type InputTuple = [
    seller: AddressLike,
    nft: AddressLike,
    tokenId: BigNumberish,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    nft: string,
    tokenId: bigint,
    newPrice: bigint
  ];
  export interface OutputObject {
    seller: string;
    nft: string;
    tokenId: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingsCountUpdatedEvent {
  export type InputTuple = [newTotal: BigNumberish];
  export type OutputTuple = [newTotal: bigint];
  export interface OutputObject {
    newTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTListedEvent {
  export type InputTuple = [
    seller: AddressLike,
    nft: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    nft: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    seller: string;
    nft: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    buyer: AddressLike,
    nft: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    nft: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    buyer: string;
    nft: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VolumeUpdatedEvent {
  export type InputTuple = [newTotal: BigNumberish];
  export type OutputTuple = [newTotal: bigint];
  export interface OutputObject {
    newTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  buyNFT: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  cancelListing: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllListings: TypedContractMethod<
    [],
    [Marketplace.ListingIdStructOutput[]],
    "view"
  >;

  getListing: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [Marketplace.ListingStructOutput],
    "view"
  >;

  listNFT: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { seller: string; price: bigint }],
    "view"
  >;

  listingsList: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { nft: string; tokenId: bigint }],
    "view"
  >;

  platformFeeBasisPoints: TypedContractMethod<[], [bigint], "view">;

  setPlatformFee: TypedContractMethod<
    [newFeeBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalListings: TypedContractMethod<[], [bigint], "view">;

  totalVolumeTraded: TypedContractMethod<[], [bigint], "view">;

  updateListing: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllListings"
  ): TypedContractMethod<[], [Marketplace.ListingIdStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [Marketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { seller: string; price: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "listingsList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { nft: string; tokenId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformFeeBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<
    [newFeeBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalListings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolumeTraded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateListing"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ListingCanceled"
  ): TypedContractEvent<
    ListingCanceledEvent.InputTuple,
    ListingCanceledEvent.OutputTuple,
    ListingCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ListingUpdated"
  ): TypedContractEvent<
    ListingUpdatedEvent.InputTuple,
    ListingUpdatedEvent.OutputTuple,
    ListingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingsCountUpdated"
  ): TypedContractEvent<
    ListingsCountUpdatedEvent.InputTuple,
    ListingsCountUpdatedEvent.OutputTuple,
    ListingsCountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTListed"
  ): TypedContractEvent<
    NFTListedEvent.InputTuple,
    NFTListedEvent.OutputTuple,
    NFTListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VolumeUpdated"
  ): TypedContractEvent<
    VolumeUpdatedEvent.InputTuple,
    VolumeUpdatedEvent.OutputTuple,
    VolumeUpdatedEvent.OutputObject
  >;

  filters: {
    "ListingCanceled(address,address,uint256)": TypedContractEvent<
      ListingCanceledEvent.InputTuple,
      ListingCanceledEvent.OutputTuple,
      ListingCanceledEvent.OutputObject
    >;
    ListingCanceled: TypedContractEvent<
      ListingCanceledEvent.InputTuple,
      ListingCanceledEvent.OutputTuple,
      ListingCanceledEvent.OutputObject
    >;

    "ListingUpdated(address,address,uint256,uint256)": TypedContractEvent<
      ListingUpdatedEvent.InputTuple,
      ListingUpdatedEvent.OutputTuple,
      ListingUpdatedEvent.OutputObject
    >;
    ListingUpdated: TypedContractEvent<
      ListingUpdatedEvent.InputTuple,
      ListingUpdatedEvent.OutputTuple,
      ListingUpdatedEvent.OutputObject
    >;

    "ListingsCountUpdated(uint256)": TypedContractEvent<
      ListingsCountUpdatedEvent.InputTuple,
      ListingsCountUpdatedEvent.OutputTuple,
      ListingsCountUpdatedEvent.OutputObject
    >;
    ListingsCountUpdated: TypedContractEvent<
      ListingsCountUpdatedEvent.InputTuple,
      ListingsCountUpdatedEvent.OutputTuple,
      ListingsCountUpdatedEvent.OutputObject
    >;

    "NFTListed(address,address,uint256,uint256)": TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;
    NFTListed: TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;

    "NFTSold(address,address,uint256,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "VolumeUpdated(uint256)": TypedContractEvent<
      VolumeUpdatedEvent.InputTuple,
      VolumeUpdatedEvent.OutputTuple,
      VolumeUpdatedEvent.OutputObject
    >;
    VolumeUpdated: TypedContractEvent<
      VolumeUpdatedEvent.InputTuple,
      VolumeUpdatedEvent.OutputTuple,
      VolumeUpdatedEvent.OutputObject
    >;
  };
}
